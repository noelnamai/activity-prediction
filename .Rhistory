library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf_fit <- train(diagnosis~., data=training, method="rf")
gbm_fit <- train(diagnosis~., data=training, method="gbm", verbose=FALSE)
lda_fit <- train(diagnosis~., data=training, method="lda")
names(rf_fit)
rf_fit$results
rf_fit
rf_pred <- predict(rf_fit, testing)
confusionMatrix(rf_pred, testing$diagnosis)
gbm_pred <- predict(gbm_fit, testing)
confusionMatrix(gbm_pred, testing$diagnosis)
lda_pred <- predict(lda_fit, testing)
confusionMatrix(lda_pred, testing$diagnosis)
comb_df <- data.frame(rf_pred, gbm_pred, lda_pred, diagnosis=testing$diagnosis)
comb_fit <- train(diagnosis~., data=comb_df, method="rf")
comb_fit
comb_pred <- predict(comb_fit, testing)
confusionMatrix(comb_pred, testing$diagnosis)
rf_fit <- train(diagnosis~., data=training, method="rf")
rf_pred <- predict(rf_fit, training)
gbm_pred <- predict(gbm_fit, training)
lda_pred <- predict(lda_fit, training)
comb_df <- data.frame(rf_pred, gbm_pred, lda_pred, diagnosis=training$diagnosis)
comb_fit <- train(diagnosis~., data=comb_df, method="rf")
comb_pred <- predict(comb_fit, testing)
confusionMatrix(comb_pred, testing$diagnosis)
head(comd_df)
head(comb_df)
comb_fit
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
fit <- train(CompressiveStrength~., data=training, method="lasso")
print.enet(fit$finalModel)
print.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
plot.enet(fit$finalModel, xvar="penalty", use.color=TRUE)
fit <- train(CompressiveStrength~., data=training, method="lasso", trace=TRUE)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
setwd("C:/Users/kassidy/Desktop/Noel/GitHub/practical_machine_learning")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
head(training)
head(tstrain)
fit <- bat(tstrain, use.parallel=FALSE)
library(forecast)
install.packages("forecast")
fit <- bat(tstrain, use.parallel=FALSE)
library(forecast)
fit <- bat(tstrain, use.parallel=FALSE)
fit <- bats(tstrain, use.parallel=FALSE)
fit
tstest = ts(testing$visitsTumblr)
plot(forecast(fit))
forecast(fit)
pred <- forecast(fit, h=length(tstest))
pred
accuracy(pred, tstest)
library(forecast)
fit <- bats(tstrain, use.parallel=FALSE)
tstrain
tstest = ts(testing$visitsTumblr)
tstest
pred <- forecast(fit, h=600)
head(pred)
library(forecast)
fit <- bats(tstrain, use.parallel=FALSE)
fit
pred <- forecast(fit, h=235)
pred
tstest
accuracy(pred$Forecast, tstest)
library(caret)
confusionMatrix(pred$Forecast, tstest)
confusionMatrix(pred, tstest)
accuracy(pred, tstest)
pred <- forecast(fit, h=235, level=c(95))
pred
pred$test <- tstest
pred
tstest
name(pred)
names(pred)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
fit <- svm(CompressiveStrength~., data=concrete)
pred <- predict(fit, testing)
pred
confusionMatrix(pred, testing$CompressiveStrength)
table(pred, testing$CompressiveStrength)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
fit <- svm(CompressiveStrength~., data=concrete)
fit
pred <- predict(fit, testing)
sqrt(mean((pred - testing$CompressiveStrength)^2))
